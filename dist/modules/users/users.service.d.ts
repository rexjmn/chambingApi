import { Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { AwsService } from '../aws/aws.service';
export declare class UsersService {
    private usersRepository;
    private readonly awsService;
    constructor(usersRepository: Repository<User>, awsService: AwsService);
    create(createUserDto: CreateUserDto): Promise<User>;
    findOne(id: string): Promise<User>;
    findByEmail(email: string): Promise<User>;
    findAll(): Promise<User[]>;
    findAllWorkers(onlyVerified?: boolean): Promise<User[]>;
    getPublicProfile(userId: string): Promise<{
        status: string;
        data: {
            tarifas: import("../services/entities/tarifa-trabajador.entity").TarifaTrabajador | null;
            id: string;
            email: string;
            password: string;
            nombre: string;
            apellido: string;
            telefono: string;
            departamento: string;
            municipio: string;
            direccion: string;
            titulo_profesional: string;
            biografia: string;
            dui: string;
            activo: boolean;
            foto_perfil: string | null;
            tipo_foto_perfil: string | null;
            foto_portada: string | null;
            tipo_foto_portada: string | null;
            tipo_usuario: string;
            verificado: boolean;
            fecha_registro: Date;
            rolesAdministrativos: import("../roles/entities/rol-administrativo.entity").RolAdministrativo[];
            habilidades: import("../skills/entities/skill.entity").Skill[];
        };
    }>;
    findPendingWorkers(): Promise<User[]>;
    getVerifiedWorkers(filters: {
        tipoUsuario?: string;
        verificado?: boolean;
        categoria?: string;
        departamento?: string;
        search?: string;
    }): Promise<User[]>;
    verifyWorker(workerId: string, verified: boolean): Promise<User>;
    changeUserType(userId: string, newType: 'cliente' | 'trabajador'): Promise<User>;
    update(id: string, updateData: Partial<User>): Promise<User>;
    updateProfile(userId: string, updateData: Partial<User>): Promise<User>;
    remove(id: string): Promise<void>;
    updatePassword(id: string, hashedPassword: string): Promise<void>;
    getUserRoles(userId: string): Promise<string[]>;
    updateProfilePhoto(userId: string, file: Express.Multer.File): Promise<User>;
    updateCoverPhoto(userId: string, file: Express.Multer.File): Promise<User>;
    removeCoverPhoto(userId: string): Promise<User>;
    private getKeyFromUrl;
    updateUserSkills(userId: string, skillIds: string[]): Promise<User>;
}
